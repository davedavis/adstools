{"version":3,"file":"content.js","mappings":"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","sources":["webpack://empty-project/./src/index.js"],"sourcesContent":["// This code sets up a MutationObserver to watch for changes in the DOM. When the observed mutations\n// include changes to the child list of nodes, it checks if a popup with the class name 'popup-wrapper'\n// is present and visible. If so, it hides the popup by modifying its display style property.\n// The observer starts observing mutations when the window has finished loading.\n\n// The code starts by creating a new MutationObserver using the MutationObserver constructor.\n// The observer is defined with a callback function that will be called when mutations are\n// observed in the specified target. Inside the callback function, the code iterates over the mutationsList,\n// which contains a list of mutations that have been observed. It checks each mutation to see if it is of type\n// 'childList', indicating that the structure of the DOM has changed.\n//\n// If the mutation is of type 'childList', the code proceeds to check if the popup exists in the DOM by querying\n// the document for an element with the class name 'popup-wrapper'. The result is stored in the popup variable.\n//\n// Next, the code checks if the popup exists and if it has the class name 'visible'. This ensures that the popup is\n// both present in the DOM and currently visible on the page.\n//\n// If the conditions are met, the code hides the popup by changing its display style property to 'none'.\n// This effectively makes the popup invisible.\n//\n// Finally, there is a commented-out line (// observer.disconnect();) that shows an optional step to stop\n// observing mutations after hiding the popup. If you uncomment this line, the observer will be disconnected,\n// and no further mutations will be observed.\n//\n// Outside the observer callback function, there is an event listener attached to the window object for the 'load'\n// event. This event is fired when the entire page has finished loading, including its dependencies such as\n// stylesheets and images. When the 'load' event is triggered, the observer starts observing changes in the\n// document body and its subtree. This is done by calling the observe method on the observer object,\n// passing in the document.body as the target node to observe, and specifying the options object with childList: true\n// and subtree: true to include all child nodes and their descendants in the mutation observations.\n\n// MutationObserver method to auto hide Google Ads notification.\n// ToDo: Condition this on user preference for option.\nconst observer = new MutationObserver((mutationsList, observer) => {\n    for(let mutation of mutationsList) {\n        if (mutation.type === 'childList') {\n            // Check if the popup exists\n            let popup = document.querySelector('.popup-wrapper');\n            if(popup && popup.classList.contains('visible')) {\n                // Hide the popup\n                popup.style.display = 'none';\n                // Stop observing if you want\n                // observer.disconnect();\n            }\n        }\n    }\n});\n\nwindow.addEventListener('load', (event) => {\n    observer.observe(document.body, { childList: true, subtree: true });\n});\n\n\n\n// Code to check for a final URL field in Performance Max campaigns.\n// Define a function to execute when mutations are observed\nlet checkDom = function(mutationsList, observer) {\n    for(let mutation of mutationsList) {\n        if (mutation.type === 'childList') {\n            // Try finding the label\n            let inputLabel = document.querySelector('.input-container');\n            // If the label is found\n            if (inputLabel !== null) {\n                // Identify the input field within the label\n                let urlInput = inputLabel.querySelector('.input-area');\n\n                // If the element exists\n                if (urlInput) {\n                    // Create image\n                    let img = document.createElement('img');\n                    // img.src = chrome.runtime.getURL('icons/gptit.png'); // you may need to adjust the path to match your structure\n                    img.id = 'gptit-icon';\n                    img.style.display = 'none';\n                    img.style.cursor = 'pointer';\n\n                    // Get the image URL from the background script\n                    chrome.runtime.sendMessage({contentScriptQuery: \"fetchImage\", path: 'icons/gptit.png'}, result => {\n                        img.src = result.url;\n                    });\n\n                    // Inject the image just before the input field within the label\n                    inputLabel.insertBefore(img, urlInput);\n\n                    // Create modal and hide it initially\n                    let modal = document.createElement('div');\n                    modal.id = 'gptit-modal';\n                    modal.style.display = 'none';\n                    modal.innerHTML = `\n                        <p>${urlInput.value}</p>\n                        <button id=\"gptit-btn\">Get Headline & Description suggestions from GPT</button>\n                    `;\n                    document.body.appendChild(modal);\n\n                    // Add event listener to the image\n                    img.addEventListener('click', function() {\n                        modal.style.display = 'block'; // Show the modal\n                        document.querySelector('#gptit-modal p').textContent = urlInput.value;\n                    });\n\n                    // Add event listener to the button\n                    document.getElementById('gptit-btn').addEventListener('click', function() {\n                        // TODO: Call the function that gets the headline & description suggestions from GPT\n                        modal.style.display = 'none'; // Hide the modal\n                    });\n\n                    // Create a Mutation Observer instance to track changes\n                    let observer = new MutationObserver(function(mutations) {\n                        mutations.forEach(function(mutation) {\n                            if (mutation.type == 'attributes' && mutation.attributeName === 'value') {\n                                if(urlInput.value !== '') {\n                                    img.style.display = 'block';\n                                } else {\n                                    img.style.display = 'none';\n                                }\n                            }\n                        });\n                    });\n\n                    // Configuration of the observer\n                    let config = { attributes: true, childList: false, subtree: false };\n\n                    // Pass in the target node and observer's configuration\n                    observer.observe(urlInput, config);\n\n                    // We found the label, so we can stop observing\n                    observer.disconnect();\n                    break;\n                }\n            }\n        }\n    }\n};\n\n// Create an observer instance linked to the callback function\nlet finalUrlObserver = new MutationObserver(checkDom);\n\n// Start observing the document with the configured parameters\nfinalUrlObserver.observe(document.body, { childList: true, subtree: true });\n\n\n\n"],"names":["observer","MutationObserver","mutationsList","_iterator","_createForOfIteratorHelper","_step","s","n","done","mutation","value","type","popup","document","querySelector","classList","contains","style","display","err","e","f","window","addEventListener","event","observe","body","childList","subtree","checkDom","_iterator2","_step2","_loop","inputLabel","urlInput","img","createElement","id","cursor","chrome","runtime","sendMessage","contentScriptQuery","path","result","src","url","insertBefore","modal","innerHTML","concat","appendChild","textContent","getElementById","mutations","forEach","attributeName","config","attributes","disconnect","_ret","finalUrlObserver"],"sourceRoot":""}